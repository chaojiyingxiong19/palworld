(function () { "use strict"; var e = { 947: function (e, a, t) { var l = t(7195), n = t(5114), i = t.n(n), s = function () { var e = this, a = e._self._c; return a("div", { attrs: { id: "app" } }, [a("HelloWorld")], 1) }, u = [], o = function () { var e = this, a = e._self._c; return a("div", [a("div", { staticClass: "top" }, [e._m(0), e._m(1), a("div", { staticClass: "navigator_container" }, [a("div", { staticClass: "navigator" }, [a("li", [e._v("配置工具")]), a("li", { on: { click: function (a) { return e.handle("https://www.yuque.com/jinhuang-hdwmg/gs0sg7/ful6rq6nltt6r7gq") } } }, [e._v("教程合集")])])])]), a("div", { staticClass: "show" }, [a("div", { staticClass: "import" }, [a("h3", [e._v("导入配置")]), a("el-input", { attrs: { resize: "none", type: "textarea", rows: 8, placeholder: "请将配置文件内数据粘贴到此处后，点击导入配置，并在下方进行配置" }, model: { value: e.textarea, callback: function (a) { e.textarea = a }, expression: "textarea" } }), a("el-button", { staticClass: "import_btn", attrs: { type: "primary", round: "" }, on: { click: function (a) { return e.importConfig() } } }, [e._v("导入配置")])], 1), a("div", { staticClass: "exp" }, [a("h3", [e._v("导出配置")]), a("div", { staticClass: "expshow" }, [a("div", [e._v("[/Script/Pal.PalGameWorldSettings]")]), e._v(" " + e._s(e.result) + " ")]), a("el-button", { staticClass: "save_btn", attrs: { type: "primary", round: "" }, on: { click: function (a) { return e.saveConfig() } } }, [e._v("保存并生成配置")])], 1)]), a("div", { staticClass: "config_container" }, [a("div", [a("el-tabs", { on: { "tab-click": e.handleClick }, model: { value: e.activeName, callback: function (a) { e.activeName = a }, expression: "activeName" } }, [a("el-tab-pane", { attrs: { label: "服务器配置", name: "first" } }, e._l(e.serverData, (function (t, l) { return a("div", { key: l, staticClass: "row" }, [a("li", { staticClass: "key" }, [a("span", [e._v(e._s(t.key))])]), a("li", { staticClass: "name" }, [a("span", [e._v(e._s(t.name))]), a("span", { directives: [{ name: "show", rawName: "v-show", value: 1 == t.mustFill, expression: "item.mustFill == true" }], staticClass: "mustfill" }, [e._v(" *")])]), a("li", { staticClass: "value" }, ["text" == t.type ? a("el-input", { attrs: { placeholder: "请输入内容", maxlength: "50" }, model: { value: t.value, callback: function (a) { e.$set(t, "value", a) }, expression: "item.value" } }) : e._e(), "text_number" == t.type ? a("el-input", { attrs: { oninput: "value=value.replace(/[^\\d]/g,'')" }, model: { value: t.value, callback: function (a) { e.$set(t, "value", a) }, expression: "item.value" } }) : e._e(), "password" == t.type ? a("el-input", { attrs: { placeholder: "请输入密码", "show-password": "" }, model: { value: t.value, callback: function (a) { e.$set(t, "value", a) }, expression: "item.value" } }) : e._e(), "number" == t.type ? a("el-input-number", { attrs: { min: 1, max: 32 }, model: { value: t.value, callback: function (a) { e.$set(t, "value", a) }, expression: "item.value" } }) : e._e(), "boolean" == t.type ? a("el-switch", { attrs: { "active-color": "#13ce66", "inactive-color": "#ff4949" }, model: { value: t.value, callback: function (a) { e.$set(t, "value", a) }, expression: "item.value" } }) : e._e()], 1)]) })), 0), a("el-tab-pane", { attrs: { label: "游戏配置", name: "second" } }, e._l(e.gameData, (function (t, l) { return a("div", { key: l, staticClass: "row" }, [a("li", { staticClass: "key" }, [a("span", [e._v(e._s(t.key))])]), a("li", { staticClass: "name" }, [a("span", [e._v(e._s(t.name))]), a("span", { directives: [{ name: "show", rawName: "v-show", value: 1 == t.mustFill, expression: "item.mustFill == true" }], staticClass: "mustfill" }, [e._v(" *")])]), a("li", { staticClass: "value" }, ["radio_multiple" == t.type ? a("el-radio-group", { model: { value: t.value, callback: function (a) { e.$set(t, "value", a) }, expression: "item.value" } }, [a("el-radio-button", { attrs: { label: "None" } }), a("el-radio-button", { attrs: { label: "Casual" } }), a("el-radio-button", { attrs: { label: "Normal" } }), a("el-radio-button", { attrs: { label: "Hard" } })], 1) : e._e(), "radio_multiple2" == t.type ? a("el-radio-group", { model: { value: t.value, callback: function (a) { e.$set(t, "value", a) }, expression: "item.value" } }, [a("el-radio-button", { attrs: { label: "None" } }), a("el-radio-button", { attrs: { label: "Item" } }), a("el-radio-button", { attrs: { label: "ItemAndEquipment" } }), a("el-radio-button", { attrs: { label: "All" } })], 1) : e._e(), "slide" == t.type ? a("div", { staticClass: "block", staticStyle: { height: "55px" } }, [a("el-slider", { attrs: { max: 10, step: .1 }, model: { value: t.value, callback: function (a) { e.$set(t, "value", a) }, expression: "item.value" } }), a("div", { staticClass: "block_number" }, [e._v("x " + e._s(t.value))])], 1) : e._e(), "boolean" == t.type ? a("el-switch", { attrs: { "active-color": "#13ce66", "inactive-color": "#ff4949" }, model: { value: t.value, callback: function (a) { e.$set(t, "value", a) }, expression: "item.value" } }) : e._e(), "number" == t.type ? a("el-input-number", { attrs: { min: 1, max: 9999 }, model: { value: t.value, callback: function (a) { e.$set(t, "value", a) }, expression: "item.value" } }) : e._e(), "time" == t.type ? a("div", { staticClass: "block", staticStyle: { height: "55px" } }, [a("el-slider", { attrs: { max: 72, step: 1 }, model: { value: t.value, callback: function (a) { e.$set(t, "value", a) }, expression: "item.value" } }), a("div", { staticClass: "block_number" }, [e._v(e._s(t.value) + "小时")])], 1) : e._e(), "time_short" == t.type ? a("div", { staticClass: "block", staticStyle: { height: "55px" } }, [a("el-slider", { attrs: { max: 72, step: .1 }, model: { value: t.value, callback: function (a) { e.$set(t, "value", a) }, expression: "item.value" } }), a("div", { staticClass: "block_number" }, [e._v(e._s(t.value) + "小时")])], 1) : e._e()], 1)]) })), 0)], 1)], 1), e._m(2)])]) }, r = [function () { var e = this, a = e._self._c; return a("div", { staticClass: "nav_container" }, [a("div", { staticClass: "nav" }, [e._v(" Palworld | "), a("span", { attrs: { id: "nav_cn" } }, [e._v("帕鲁配置文件工具箱 ")]), a("span", { attrs: { id: "qq" } }, [e._v("帕鲁交流群：557368659")])])]) }, function () { var e = this, a = e._self._c; return a("div", { staticClass: "adv" }, [a("img", { attrs: { src: t(6884), alt: "" } })]) }, function () { var e = this, a = e._self._c; return a("div", [a("li"), e._v(" tips：标记"), a("span", { staticClass: "mustfill" }, [e._v(" *")]), e._v("的配置被建议为必填项 ")]) }], m = { name: "HelloWorld", data() { return { activeName: "first", result: "", textarea: "", serverData: [{ key: "ServerPlayerMaxNum", name: "服务器玩家最大人数", value: 32, type: "number", mustFill: !0 }, { key: "ServerName", name: "服务器名称", value: "Default Palworld Server", type: "text", mustFill: !0 }, { key: "ServerDescription", name: "服务器描述", value: "", type: "text", mustFill: !0 }, { key: "AdminPassword", name: "管理员密码", value: "", type: "password", mustFill: !0 }, { key: "ServerPassword", name: "服务器密码", value: "", type: "password", mustFill: !0 }, { key: "PublicPort", name: "服务器端口", value: 8211, type: "text_number", mustFill: !0 }, { key: "PublicIP", name: "服务器ip", value: "", type: "text", mustFill: !1 }, { key: "RCONEnabled", name: "启用 RCON", value: !1, type: "boolean", mustFill: !0 }, { key: "RCONPort", name: "RCON端口", value: 25575, type: "text_number", mustFill: !0 }, { key: "Region", name: "地区", value: "", type: "text", mustFill: !1 }, { key: "bUseAuth", name: "使用授权", value: !0, type: "boolean", mustFill: !0 }, { key: "BanListURL", name: "封禁用户URL", value: "https://api.palworldgame.com/api/banlist.txt", type: "text", mustFill: !1 }], gameData: [{ key: "Difficulty", name: "难度", value: "None", type: "radio_multiple", mustFill: !1, num: "" }, { key: "DayTimeSpeedRate", name: "白天流逝速度", value: 1, type: "slide", mustFill: !1, num: "float" }, { key: "NightTimeSpeedRate", name: "夜晚流逝速度", value: 1, type: "slide", mustFill: !1, num: "float" }, { key: "ExpRate", name: " 经验值倍率", value: 1, type: "slide", mustFill: !1, num: "float" }, { key: "PalCaptureRate", name: "捕捉概率倍率", value: 1, type: "slide", mustFill: !1, num: "float" }, { key: "PalSpawnNumRate", name: "帕鲁出现数量倍率", value: 1, type: "slide", mustFill: !1, num: "float" }, { key: "PalDamageRateAttack", name: " 帕鲁攻击伤害倍率", value: 1, type: "slide", mustFill: !1, num: "float" }, { key: "PalDamageRateDefense", name: " 帕鲁承受伤害倍率", value: 1, type: "slide", mustFill: !1, num: "float" }, { key: "PlayerDamageRateAttack", name: "玩家攻击伤害倍率", value: 1, type: "slide", mustFill: !1, num: "float" }, { key: "PlayerDamageRateDefense", name: "玩家承受伤害倍率", value: 1, type: "slide", mustFill: !1, num: "float" }, { key: "PlayerStomachDecreaceRat", name: "玩家饱食度降低倍率", value: 1, type: "slide", mustFill: !1, num: "float" }, { key: "PlayerStaminaDecreaceRate", name: "玩家耐力倍率", value: 1, type: "slide", mustFill: !1, num: "float" }, { key: "PlayerAutoHPRegeneRate", name: "玩家生命值恢复倍率", value: 1, type: "slide", mustFill: !1, num: "float" }, { key: "PlayerAutoHpRegeneRateInSleep", name: "玩家睡眠时生命恢复倍率", value: 1, type: "slide", mustFill: !1, num: "float" }, { key: "PalStomachDecreaceRate", name: "帕鲁饱食度降低倍率", value: 1, type: "slide", mustFill: !1, num: "float" }, { key: "PalStaminaDecreaceRate", name: "帕鲁耐力降低倍率", value: 1, type: "slide", mustFill: !1, num: "float" }, { key: "PalAutoHPRegeneRate", name: "帕鲁生命值自然恢复倍率", value: 1, type: "slide", mustFill: !1, num: "float" }, { key: "PalAutoHpRegeneRateInSleep", name: "帕鲁睡眠时生命恢复倍率", value: 1, type: "slide", mustFill: !1, num: "float" }, { key: "BuildObjectDamageRate", name: "对建筑物伤害倍率", value: 1, type: "slide", mustFill: !1, num: "float" }, { key: "BuildObjectDeteriorationDamageRate", name: "建筑物劣化速度倍率", value: 1, type: "slide", mustFill: !1, num: "float" }, { key: "CollectionDropRate", name: "可采集物品掉落倍率", value: 1, type: "slide", mustFill: !1, num: "float" }, { key: "CollectionObjectHpRate", name: "可采集物品生命值倍率", value: 1, type: "slide", mustFill: !1, num: "float" }, { key: "CollectionObjectRespawnSpeedRate", name: "可采集物品生成速率", value: 1, type: "slide", mustFill: !1, num: "float" }, { key: "EnemyDropItemRate", name: "敌方掉落物品率", value: 1, type: "slide", mustFill: !1, num: "float" }, { key: "DeathPenalty", name: "死亡惩罚", value: "All", type: "radio_multiple2", mustFill: !1, num: "" }, { key: "bEnablePlayerToPlayerDamage", name: "启用玩家对玩家伤害功能", value: !1, type: "boolean", mustFill: !1, num: "" }, { key: "bEnableFriendlyFire", name: "火焰伤害", value: !1, type: "boolean", mustFill: !1, num: "" }, { key: "bEnableInvaderEnemy", name: "是否会发生袭击事件", value: !0, type: "boolean", mustFill: !1, num: "" }, { key: "bActiveUNKO", name: "是否排泄", value: !1, type: "boolean", mustFill: !1, num: "" }, { key: "bEnableAimAssistPad", name: "启用瞄准辅助（手柄）", value: !1, type: "boolean", mustFill: !1, num: "" }, { key: "bEnableAimAssistKeyboard", name: "启用瞄准辅助（键盘）", value: !0, type: "boolean", mustFill: !1, num: "" }, { key: "DropItemMaxNum", name: "掉落物品最大数量", value: 3e3, type: "number", mustFill: !1, num: "" }, { key: "DropItemMaxNum_UNKO", name: "掉落物品最大数量_排泄物", value: 100, type: "number", mustFill: !1, num: "" }, { key: "BaseCampMaxNum", name: "最大基地数目", value: 128, type: "number", mustFill: !1, num: "" }, { key: "BaseCampWorkerMaxNum", name: "基地工人最大容量", value: 15, type: "number", mustFill: !1, num: "" }, { key: "DropItemAliveMaxHours", name: "掉落物品存在最大时长", value: 1, type: "time", mustFill: !1, num: "float" }, { key: "bAutoResetGuildNoOnlinePlayers", name: "自动解散没有在线玩家的公会", value: !1, type: "boolean", mustFill: !1, num: "" }, { key: "AutoResetGuildTimeNoOnlinePlayers", name: "无在线玩家工会自动解散时间", value: 72, type: "time", mustFill: !1, num: "float" }, { key: "GuildPlayerMaxNum", name: "公会玩家最大数量", value: 20, type: "number", mustFill: !1, num: "" }, { key: "PalEggDefaultHatchingTime", name: "帕鲁蛋默认孵化时间", value: 72, type: "time_short", mustFill: !1, num: "float" }, { key: "WorkSpeedRate", name: "工作速率", value: 1, type: "slide", mustFill: !1, num: "float" }, { key: "bIsMultiplay", name: "多人游戏", value: !1, type: "boolean", mustFill: !1, num: "" }, { key: "bIsPvP", name: "启用PvP", value: !1, type: "boolean", mustFill: !1, num: "" }, { key: "bCanPickupOtherGuildDeathPenaltyDrop", name: "可拾取其他公会的死亡掉落物", value: !1, type: "boolean", mustFill: !1, num: "" }, { key: "bEnableNonLoginPenalt", name: "启用不登录惩罚", value: !0, type: "boolean", mustFill: !1, num: "" }, { key: "bEnableFastTravel", name: "启用快速旅行", value: !0, type: "boolean", mustFill: !1, num: "" }, { key: "bIsStartLocationSelectByMap", name: "通过地图选择起始位置", value: !0, type: "boolean", mustFill: !1, num: "" }, { key: "bExistPlayerAfterLogout", name: "注销后玩家仍然存在", value: !1, type: "boolean", mustFill: !1, num: "" }, { key: "bEnableDefenseOtherGuildPlayer", name: "启用防御其他公会玩家功能", value: !1, type: "boolean", mustFill: !1, num: "" }, { key: "CoopPlayerMaxNum", name: "合作玩家最大人数", value: 4, type: "number", mustFill: !1, num: "" }] } }, methods: { handleClick(e, a) { console.log(e, a) }, saveConfig() { for (var e = "OptionSettings=(", a = "", t = "", l = "", n = 0; n < this.gameData.length; n++)"text" == this.gameData[n].type ? e = e + this.gameData[n].key + '="' + this.gameData[n].value + '",' : "boolean" == this.gameData[n].type ? (a = this.gameData[n].value.toString(), t = a.charAt(0).toUpperCase() + a.slice(1), e = e + this.gameData[n].key + "=" + t + ",") : "float" == this.gameData[n].num ? (l = this.gameData[n].value.toString(), -1 != l.indexOf(".") ? (l += "00000", console.log(l)) : l += ".000000", e = e + this.gameData[n].key + "=" + l + ",") : e = e + this.gameData[n].key + "=" + this.gameData[n].value + ","; for (var i = 0; i < this.serverData.length; i++)"text" == this.serverData[i].type || "password" == this.serverData[i].type ? e = e + this.serverData[i].key + '="' + this.serverData[i].value + '",' : "boolean" == this.serverData[i].type ? (a = this.serverData[i].value.toString(), t = a.charAt(0).toUpperCase() + a.slice(1), e = e + this.serverData[i].key + "=" + t + ",") : e = e + this.serverData[i].key + "=" + this.serverData[i].value + ","; e = e.slice(0, -1) + ")", this.result = e }, importConfig() { var e = this.textarea, a = e.split("("); a = a[1].split(")"), a = a[0].split(","); for (var t = 0; t < a.length; t++) { a[t] = a[t].split("="); for (var l = 0; l < this.serverData.length; l++)if (a[t][0] == this.serverData[l].key) if ("True" == a[t][1]) this.serverData[l].value = !0; else if ("False" == a[t][1]) this.serverData[l].value = !1; else { var n = a[t][1].replace('"', ""), i = n.replace('"', ""); this.serverData[l].value = i } for (var s = 0; s < this.gameData.length; s++)if (a[t][0] == this.gameData[s].key) if ("True" == a[t][1]) this.gameData[s].value = !0; else if ("False" == a[t][1]) this.gameData[s].value = !1; else if (-1 != a[t][1].indexOf(".")) this.gameData[s].value = parseFloat(parseFloat(a[t][1]).toFixed(1)); else { var u = a[t][1].replace('"', ""), o = u.replace('"', ""); this.gameData[s].value = o } } console.log(a) }, handle(e) { window.open(e, "_blank") } } }, v = m, c = t(1001), p = (0, c.Z)(v, o, r, !1, null, null, null), y = p.exports, d = { name: "App", components: { HelloWorld: y } }, f = d, b = (0, c.Z)(f, s, u, !1, null, null, null), k = b.exports; l["default"].use(i()), l["default"].config.productionTip = !1, new l["default"]({ render: e => e(k) }).$mount("#app") }, 6884: function (e, a, t) { e.exports = t.p + "img/palu.png" } }, a = {}; function t(l) { var n = a[l]; if (void 0 !== n) return n.exports; var i = a[l] = { id: l, loaded: !1, exports: {} }; return e[l].call(i.exports, i, i.exports, t), i.loaded = !0, i.exports } t.m = e, function () { t.amdO = {} }(), function () { var e = []; t.O = function (a, l, n, i) { if (!l) { var s = 1 / 0; for (m = 0; m < e.length; m++) { l = e[m][0], n = e[m][1], i = e[m][2]; for (var u = !0, o = 0; o < l.length; o++)(!1 & i || s >= i) && Object.keys(t.O).every((function (e) { return t.O[e](l[o]) })) ? l.splice(o--, 1) : (u = !1, i < s && (s = i)); if (u) { e.splice(m--, 1); var r = n(); void 0 !== r && (a = r) } } return a } i = i || 0; for (var m = e.length; m > 0 && e[m - 1][2] > i; m--)e[m] = e[m - 1]; e[m] = [l, n, i] } }(), function () { t.n = function (e) { var a = e && e.__esModule ? function () { return e["default"] } : function () { return e }; return t.d(a, { a: a }), a } }(), function () { t.d = function (e, a) { for (var l in a) t.o(a, l) && !t.o(e, l) && Object.defineProperty(e, l, { enumerable: !0, get: a[l] }) } }(), function () { t.g = function () { if ("object" === typeof globalThis) return globalThis; try { return this || new Function("return this")() } catch (e) { if ("object" === typeof window) return window } }() }(), function () { t.o = function (e, a) { return Object.prototype.hasOwnProperty.call(e, a) } }(), function () { t.r = function (e) { "undefined" !== typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e, "__esModule", { value: !0 }) } }(), function () { t.nmd = function (e) { return e.paths = [], e.children || (e.children = []), e } }(), function () { t.p = "/" }(), function () { var e = { 143: 0 }; t.O.j = function (a) { return 0 === e[a] }; var a = function (a, l) { var n, i, s = l[0], u = l[1], o = l[2], r = 0; if (s.some((function (a) { return 0 !== e[a] }))) { for (n in u) t.o(u, n) && (t.m[n] = u[n]); if (o) var m = o(t) } for (a && a(l); r < s.length; r++)i = s[r], t.o(e, i) && e[i] && e[i][0](), e[i] = 0; return t.O(m) }, l = self["webpackChunkpalworld_config_manager"] = self["webpackChunkpalworld_config_manager"] || []; l.forEach(a.bind(null, 0)), l.push = a.bind(null, l.push.bind(l)) }(); var l = t.O(void 0, [998], (function () { return t(947) })); l = t.O(l) })();
//# sourceMappingURL=app.972b8ba1.js.map